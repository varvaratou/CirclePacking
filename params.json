{"name":"Circle packing","tagline":"15.456 Final project","body":"by Varvara Toulkeridou\r\n\r\n### Main idea\r\n\r\nThe objective of this project was to implement a visualization of a circle packing algorithm. \r\nCircle packing is a configuration of circles having a specified pattern of tangencies, as introduced by William Thurston in 1985. \r\n\r\n![intro](http://i.stack.imgur.com/vm68m.jpg)\r\n\r\n### Motivation\r\nCircle packing in architecture and design has being use as a tool for pattern generation. \r\n![design2](https://s3.amazonaws.com/bucket.of.vatou/design2)\r\nImage source: Schiftner et al(2009)\r\n![design1](http://www.chrisbosse.de/projects/lochhaus/web/h1.jpg)\r\nImage source: http://www.chrisbosse.de/projects/lochhaus/web/h1.jpg\r\n\r\n\r\n### Algorithm\r\nAfter searching the relevant literature I chose to base my implementation on a circle packing algorithm described by Collins and Stephenson (2003), based on an iterative process first suggested by Thurston. \r\nThe algorithm takes as input a complex K and appropriate boundary conditions and through an iterative process computes the radii of the corresponding circle packing of K. The input complex K needs to be restricted to a finite triangulation. \r\nWhile the algorithm can be applied to both Euclidean and Hyperbolic geometry, my visualization implementation focuses on Euclidean geometry. \r\n\r\n![cp](http://www.math.fsu.edu/~mhurdal/posters/images/basicpack.gif)\r\n### Visualization description \r\nThe input complex K represents combinatorial relationships between circles. Every vertex represents a circle while each edge represents tangency between the circles it links. However, in order to simplify it for the user to generate an input planar graph, I applied triangulation to an input point set (the user adds point on the applet canvas by clicking). We see an example in the figure below.\r\n![complex](https://s3.amazonaws.com/bucket.of.vatou/snapshot4.png)\r\n\r\nOnce the input complex is finalized radii values are applied to each circle. The boundary circles, determined here by the points belonging to the convex hull boundary of the point set are assigned a fixed value. The circles corresponding to the internal vertices are assigned a random radius which is going to change during the algorithm. \r\n![radiiAssignemnt](https://s3.amazonaws.com/bucket.of.vatou/snapshot5.png)\r\n\r\nThe computation of the radii is based on the following pseudocode provided by Stephenson(2005). The computation is based on testing the angle sum at each vertex v given the assigned radii. \r\nA 'flower' is defined as a set of circles consisting of a central circle and some number of petal circles, a chain of successively tangent neighbors. The angle sum θ of the flower configuration is denoted by:\r\n\r\nθ(v; R) = Σ angle(R(v); R(u), R(w))\r\n\r\nPseudo code for radii computation (Stephenson(2005)).\r\n```\r\nInput: \r\n-List C of the circles \r\n-List of the neighbors of each circle in order\r\n\r\n1.Initialize R by setting the radii of the boundary circles to fixed values\r\n  and the radii of the interior circles to arbitrary values \r\n2.For each interior circle Ci:\r\n   a.Compute the interior angle sum θi using the law of cosines.\r\n   b.Adjust radius Ri for Ci to decrease the difference |2π- θi|:\r\n       If θi<2π then decrease Ri\r\n       If θi>2π then increase Ri\r\n3.If |2π- θi| < ε for all interior circles Ci, then we are done \r\n  else repeat step 2\r\n```\r\n\r\n\r\nStep 3b is responsible for decreasing or increasing the current label r of a given vertex v with a label r* that may give an angle sum of 2π. Stephenson (2005) suggests using a “uniform neighbor” model. The idea of this model is that we compare the current k-flower F for vertex v with a virtual uniform flower F’, one whose petal labels are set to a constant r chosen so that the angle sum θ is the same with that of F. \r\n\r\nIf k is the number of petals, β = sin(Θ/2k) and δ = sin(pi/k)\r\nThen label r* can be computed by the following equations:\r\nr* = (β/1-β)(1-δ/δ) r\r\n\r\n\r\n![snapshot1](https://s3.amazonaws.com/bucket.of.vatou/snapshot1)\r\n![snapshot3](https://s3.amazonaws.com/bucket.of.vatou/snapshot3)\r\n\r\n\r\n### References\r\nCollins, C & Stephenson, K. (2003). A circle packing algorithm. Computational Geometry, 25, 3, 233-256.                         http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.55.8546\r\nSchiftner, A., Hobinger, M., Wallner, J., Pottmann, H. (2009). Packing circles and spheres on surfaces. Acm Transactions on Graphics, 28, 5. http://www.geometrie.tuwien.ac.at/hoebinger/mhoebinger_files/circlepackings.pdf\r\nStephenson, K. (2003). Circle Packing: A Mathematical Tale. Notices of the American Mathematical Society, 50, 11, 1376.                             \r\nhttp://www.ams.org/notices/200311/fea-stephenson.pdf\r\nStephenson, K. (2005). Introduction to circle packing: The theory of discrete analytic functions. New York: Cambridge University Press. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}